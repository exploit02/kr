{"ast":null,"code":"var _jsxFileName = \"E:\\\\krishi\\\\app\\\\src\\\\components\\\\test\\\\Test.js\";\nimport React, { Component } from 'react';\nimport './Teste.css';\nimport FormValidator from './FormValidator';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.passwordMatch = (confirmation, state) => state.password === confirmation;\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      const validation = this.validator.validate(this.state);\n      this.setState({\n        validation\n      });\n      this.submitted = true;\n\n      if (validation.isValid) {// handle actual form submission here\n      }\n    };\n\n    this.validator = new FormValidator([{\n      field: 'email',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Email is required.'\n    }, {\n      field: 'email',\n      method: 'isEmail',\n      validWhen: true,\n      message: 'That is not a valid email.'\n    }, {\n      field: 'phone',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Pleave provide a phone number.'\n    }, {\n      field: 'phone',\n      method: 'matches',\n      args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/],\n      // args is an optional array of arguements that will be passed to the validation method\n      validWhen: true,\n      message: 'That is not a valid phone number.'\n    }, {\n      field: 'password',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password is required.'\n    }, {\n      field: 'password_confirmation',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password confirmation is required.'\n    }, {\n      field: 'password_confirmation',\n      method: this.passwordMatch,\n      // notice that we are passing a custom function here\n      validWhen: true,\n      message: 'Password and password confirmation do not match.'\n    }]);\n    this.state = {\n      email: '',\n      phone: '',\n      password: '',\n      password_confirmation: '',\n      validation: this.validator.valid()\n    };\n    this.submitted = false;\n  }\n\n  render() {\n    let validation = this.submitted ? // if the form has been submitted at least once\n    this.validator.validate(this.state) : // then check validity every time we render\n    this.state.validation; // otherwise just use what's in state\n\n    return React.createElement(\"form\", {\n      className: \"demoForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Sign up\"), React.createElement(\"div\", {\n      className: validation.email.isInvalid && 'has-error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Email address\"), React.createElement(\"input\", {\n      type: \"email\",\n      className: \"form-control\",\n      name: \"email\",\n      placeholder: \"john@doe.com\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, validation.email.message)), React.createElement(\"div\", {\n      className: validation.phone.isInvalid && 'has-error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"phone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Phone\"), React.createElement(\"input\", {\n      type: \"phone\",\n      className: \"form-control\",\n      name: \"phone\",\n      placeholder: \"(xxx)xxx-xxxx\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, validation.phone.message)), React.createElement(\"div\", {\n      className: validation.password.isInvalid && 'has-error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      name: \"password\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, validation.password.message)), React.createElement(\"div\", {\n      className: validation.password_confirmation.isInvalid && 'has-error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password_confirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Password Again\"), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      name: \"password_confirmation\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, validation.password_confirmation.message)), React.createElement(\"button\", {\n      onClick: this.handleFormSubmit,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Sign up\"));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["E:\\krishi\\app\\src\\components\\test\\Test.js"],"names":["React","Component","FormValidator","Form","constructor","passwordMatch","confirmation","state","password","handleInputChange","event","preventDefault","setState","target","name","value","handleFormSubmit","validation","validator","validate","submitted","isValid","field","method","validWhen","message","args","email","phone","password_confirmation","valid","render","isInvalid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './Teste.css';\r\nimport FormValidator from './FormValidator';\r\n\r\nclass Form extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.validator = new FormValidator([\r\n      { \r\n        field: 'email', \r\n        method: 'isEmpty', \r\n        validWhen: false, \r\n        message: 'Email is required.' \r\n      },\r\n      { \r\n        field: 'email',\r\n        method: 'isEmail', \r\n        validWhen: true, \r\n        message: 'That is not a valid email.'\r\n      },\r\n      { \r\n        field: 'phone', \r\n        method: 'isEmpty', \r\n        validWhen: false, \r\n        message: 'Pleave provide a phone number.'\r\n      },\r\n      {\r\n        field: 'phone', \r\n        method: 'matches',\r\n        args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/], // args is an optional array of arguements that will be passed to the validation method\r\n        validWhen: true, \r\n        message: 'That is not a valid phone number.'\r\n      },\r\n      { \r\n        field: 'password', \r\n        method: 'isEmpty', \r\n        validWhen: false, \r\n        message: 'Password is required.'\r\n      },\r\n      { \r\n        field: 'password_confirmation', \r\n        method: 'isEmpty', \r\n        validWhen: false, \r\n        message: 'Password confirmation is required.'\r\n      },\r\n      { \r\n        field: 'password_confirmation', \r\n        method: this.passwordMatch,   // notice that we are passing a custom function here\r\n        validWhen: true, \r\n        message: 'Password and password confirmation do not match.'\r\n      }\r\n    ]);\r\n\r\n    this.state = {\r\n      email: '',\r\n      phone: '',\r\n      password: '',\r\n      password_confirmation: '',\r\n      validation: this.validator.valid(),\r\n    }\r\n\r\n    this.submitted = false;\r\n  }\r\n\r\n  passwordMatch = (confirmation, state) => (state.password === confirmation)\r\n\r\n  handleInputChange = event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n    \r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const validation = this.validator.validate(this.state);\r\n    this.setState({ validation });\r\n    this.submitted = true;\r\n\r\n    if (validation.isValid) {\r\n      // handle actual form submission here\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let validation = this.submitted ?                         // if the form has been submitted at least once\r\n                      this.validator.validate(this.state) :   // then check validity every time we render\r\n                      this.state.validation                   // otherwise just use what's in state\r\n\r\n    return (\r\n      <form className=\"demoForm\">\r\n        <h2>Sign up</h2>\r\n\r\n        <div className={validation.email.isInvalid && 'has-error'}>\r\n          <label htmlFor=\"email\">Email address</label>\r\n          <input type=\"email\" className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"john@doe.com\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <span className=\"help-block\">{validation.email.message}</span>\r\n        </div>\r\n\r\n        <div className={validation.phone.isInvalid && 'has-error'}>\r\n          <label htmlFor=\"phone\">Phone</label>\r\n          <input type=\"phone\" className=\"form-control\"\r\n            name=\"phone\"\r\n            placeholder=\"(xxx)xxx-xxxx\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <span className=\"help-block\">{validation.phone.message}</span>\r\n        </div>\r\n\r\n        <div className={validation.password.isInvalid && 'has-error'}>\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input type=\"password\" className=\"form-control\"\r\n            name=\"password\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <span className=\"help-block\">{validation.password.message}</span>\r\n        </div>\r\n\r\n        <div className={validation.password_confirmation.isInvalid && 'has-error'}>\r\n          <label htmlFor=\"password_confirmation\">Password Again</label>\r\n          <input type=\"password\" className=\"form-control\"\r\n            name=\"password_confirmation\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <span className=\"help-block\">{validation.password_confirmation.message}</span>\r\n        </div>\r\n\r\n        <button onClick={this.handleFormSubmit} className=\"btn btn-primary\">\r\n          Sign up\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}