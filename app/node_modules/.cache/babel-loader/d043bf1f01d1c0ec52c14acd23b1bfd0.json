{"ast":null,"code":"import _slicedToArray from \"E:\\\\krishi\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\krishi\\\\app\\\\src\\\\utils\\\\Table.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nexport const Table = ({\n  THead,\n  TBody = {},\n  ActionButton = {},\n  Pagination,\n  Search\n}) => {\n  console.log(TBody);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInputs = _useState2[1];\n\n  const THeadLength = THead.length + 2;\n  const rowInPage = Pagination.entryInPage;\n  const currentPage = Pagination.pageNumber;\n  var hasData = false;\n  useEffect(() => {\n    Pagination.handler(1, input);\n  }, [input]);\n\n  if (Object.keys(TBody).length !== 0) {\n    var hasData = true;\n    var pageCount = Math.ceil(parseInt(TBody[0].count) / rowInPage);\n    var paginationButton = [];\n\n    for (let i = 1; i <= pageCount; i++) {\n      i === currentPage ? paginationButton.push(React.createElement(\"li\", {\n        className: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        onClick: () => Pagination.handler(i, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, i))) : paginationButton.push(React.createElement(\"li\", {\n        className: \"waves-effect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        onClick: () => Pagination.handler(i, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, i)));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-field col s7 row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    style: {\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"nav-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"input-field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"search\",\n    type: \"search\",\n    name: \"search\",\n    required: true,\n    value: input,\n    onInput: e => setInputs(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    class: \"label-icon active\",\n    for: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    class: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"search\")), React.createElement(\"i\", {\n    class: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"close\")))))), React.createElement(\"div\", {\n    className: \"input-field col s4 offset-s1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"pagination\",\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, hasData ? React.createElement(\"li\", {\n    className: currentPage === 1 ? \"disabled\" : \"waves-effect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    onClick: () => Pagination.handler(currentPage - 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"chevron_left\"))) : null, paginationButton, hasData ? React.createElement(\"li\", {\n    className: currentPage < pageCount ? \"waves-effect\" : \"disabled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    onClick: currentPage < pageCount ? () => Pagination.handler(currentPage + 1) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"chevron_right\"))) : null))), React.createElement(\"div\", {\n    className: \"z-depth-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"responsive-table centered bordered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, THead.map((THcontent, index) => {\n    return React.createElement(\"th\", {\n      className: \"testclass\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, THcontent);\n  }), Object.keys(ActionButton).length !== 0 ? React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Action\") : null)), TBody.map((TBodyData, index) => {\n    var Column = Object.keys(TBodyData).map(function (key) {\n      return TBodyData[key];\n    });\n    let adjustColumnWithHead = Column.slice(2, THeadLength).map(data => data);\n    return React.createElement(\"tbody\", {\n      key: index,\n      className: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, adjustColumnWithHead.map((ColumnData, index) => {\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, ColumnData);\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, Object.keys(ActionButton).map(Button => {\n      const ButtonProperty = ActionButton[Button];\n      let ButtonHTML;\n\n      if (ButtonProperty.Show && ButtonProperty.Link !== undefined && ButtonProperty.Link !== '') {\n        ButtonHTML = React.createElement(Link, {\n          to: {\n            pathname: ButtonProperty.Link,\n            state: {\n              countryId: Column[ButtonProperty.StateColumn]\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, ButtonProperty.ActiveIcon));\n      } else if (ButtonProperty.Show && ButtonProperty.Toggle === true) {\n        ButtonHTML = Column[ButtonProperty.BaseColumn] ? React.createElement(\"i\", {\n          className: \"material-icons\",\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => ButtonProperty.HandlingFunction(Column[0]),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, ButtonProperty.ActiveIcon) : React.createElement(\"i\", {\n          className: \"material-icons\",\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => ButtonProperty.HandlingFunction(Column[0]),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, ButtonProperty.InactiveIcon);\n      } else if (ButtonProperty.Show) {\n        ButtonHTML = Column[ButtonProperty.BaseColumn] ? React.createElement(\"i\", {\n          className: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, ButtonProperty.ActiveIcon) : React.createElement(\"i\", {\n          className: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, ButtonProperty.InactiveIcon);\n      }\n\n      return React.createElement(React.Fragment, null, ButtonHTML, ButtonProperty.Separator ? React.createElement(\"i\", {\n        className: \"material-icons small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"more_vert\") : null);\n    }))));\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["E:\\krishi\\app\\src\\utils\\Table.js"],"names":["React","useState","useEffect","Link","Table","THead","TBody","ActionButton","Pagination","Search","console","log","input","setInputs","THeadLength","length","rowInPage","entryInPage","currentPage","pageNumber","hasData","handler","Object","keys","pageCount","Math","ceil","parseInt","count","paginationButton","i","push","backgroundColor","e","target","value","float","map","THcontent","index","TBodyData","Column","key","adjustColumnWithHead","slice","data","ColumnData","Button","ButtonProperty","ButtonHTML","Show","undefined","pathname","state","countryId","StateColumn","ActiveIcon","Toggle","BaseColumn","cursor","HandlingFunction","InactiveIcon","Separator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport const Table = ({THead, TBody ={}, ActionButton={}, Pagination, Search })=>{\r\n    console.log(TBody)\r\n    const [input, setInputs] = useState('')\r\n    const THeadLength = THead.length + 2\r\n    const rowInPage = Pagination.entryInPage\r\n    const currentPage = Pagination.pageNumber\r\n    var hasData = false;\r\n\r\n    useEffect(()=>{\r\n        Pagination.handler(1, input)\r\n    }, [input])\r\n\r\n    if(Object.keys(TBody).length !== 0){\r\n        var hasData = true\r\n        var pageCount = Math.ceil(parseInt(TBody[0].count) / rowInPage)\r\n        var paginationButton = [];\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            i === currentPage ? \r\n            paginationButton.push(<li className=\"active\"><a onClick={()=>Pagination.handler(i, input)}>{i}</a></li>) :\r\n            paginationButton.push(<li className=\"waves-effect\"><a onClick={()=>Pagination.handler(i, input)}>{i}</a></li>)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"input-field col s7 row\">\r\n                <nav style={{backgroundColor:'white'}}>\r\n                    <div class=\"nav-wrapper\" >\r\n                        <form>\r\n                            <div class=\"input-field\">\r\n                                <input id=\"search\" type=\"search\" name=\"search\" required value={input} onInput={e => setInputs(e.target.value)} />\r\n                                <label class=\"label-icon active\" for=\"search\"><i class=\"material-icons\">search</i></label>\r\n                                <i class=\"material-icons\">close</i>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n                </div>\r\n                <div className=\"input-field col s4 offset-s1\">\r\n                    <ul className=\"pagination\" style={{float: 'right'}}>\r\n                        {\r\n                            hasData ? \r\n                            <li className ={ (currentPage === 1) ? \"disabled\" : \"waves-effect\"}><a onClick={()=>Pagination.handler(currentPage - 1)}><i className=\"material-icons\">chevron_left</i></a></li> \r\n                            : \r\n                            null\r\n                        }\r\n                        {\r\n                            paginationButton\r\n                        }\r\n                        {\r\n                            hasData ? \r\n                            <li className={ (currentPage < pageCount) ? \"waves-effect\" : \"disabled\"}><a onClick={(currentPage < pageCount)? ()=>Pagination.handler(currentPage + 1):null}><i className=\"material-icons\">chevron_right</i></a></li>\r\n                            : \r\n                            null\r\n                        }\r\n                        \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"z-depth-4\">\r\n                <table className=\"responsive-table centered bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                THead.map((THcontent , index) => {\r\n                                    return(\r\n                                        <th className=\"testclass\">{THcontent}</th>\r\n                                    )\r\n                                })\r\n\r\n                            }\r\n                            {\r\n                                Object.keys(ActionButton).length !== 0 ? <th>Action</th>:null\r\n                            } \r\n                        </tr>\r\n                    </thead>\r\n\r\n                        {\r\n                            \r\n                            TBody.map((TBodyData , index) => {\r\n                                var Column = Object.keys(TBodyData).map(function(key) {\r\n                                    return TBodyData[key];\r\n                                });\r\n\r\n                                let adjustColumnWithHead = Column.slice(2, THeadLength).map((data) => data)\r\n\r\n                                return (\r\n                                    <tbody key = {index} className = {index}>\r\n                                        <tr >\r\n                                            {\r\n                                                adjustColumnWithHead.map((ColumnData , index) => {\r\n                                                    return(\r\n                                                        <td>{ColumnData}</td>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <td>\r\n                                                {\r\n                                                    Object.keys(ActionButton).map((Button) => {\r\n                                                        const ButtonProperty = ActionButton[Button];\r\n                                                        let ButtonHTML\r\n                                                        if(ButtonProperty.Show && ButtonProperty.Link !== undefined && ButtonProperty.Link !== ''){\r\n                                                            \r\n                                                            ButtonHTML = \r\n                                                                <Link \r\n                                                                    to={{pathname :ButtonProperty.Link,\r\n                                                                    state: {countryId:Column[ButtonProperty.StateColumn]}\r\n                                                                    }}\r\n                                                                    ><i className=\"material-icons\">{ButtonProperty.ActiveIcon}</i>\r\n                                                                </Link>\r\n                                                                \r\n                                                        \r\n                                                        }else if(ButtonProperty.Show && ButtonProperty.Toggle === true){\r\n                                                        ButtonHTML = \r\n                                                            Column[ButtonProperty.BaseColumn] ? \r\n                                                            <i className=\"material-icons\" style={{cursor:'pointer'}} onClick={()=>ButtonProperty.HandlingFunction(Column[0])}>{ButtonProperty.ActiveIcon}</i>\r\n                                                            :\r\n                                                            <i className=\"material-icons\" style={{cursor:'pointer'}} onClick={()=>ButtonProperty.HandlingFunction(Column[0])}>{ButtonProperty.InactiveIcon}</i>;\r\n                                                                \r\n                                                        }else if(ButtonProperty.Show){\r\n                                                        ButtonHTML = \r\n                                                            Column[ButtonProperty.BaseColumn] ? \r\n                                                            <i className=\"material-icons\">{ButtonProperty.ActiveIcon}</i>\r\n                                                            :\r\n                                                            <i className=\"material-icons\">{ButtonProperty.InactiveIcon}</i>\r\n                                                        }\r\n                                                        return(\r\n                                                            < >\r\n                                                            {ButtonHTML}\r\n                                                            {\r\n                                                                ButtonProperty.Separator ? \r\n                                                                <i className=\"material-icons small\">more_vert</i>\r\n                                                                :\r\n                                                                null\r\n                                                            }\r\n                                                            </>\r\n                                                        )\r\n                                                    })  \r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                );\r\n                            })\r\n                        }\r\n                    </table>\r\n                </div>\r\n            <div/>\r\n        </div>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}