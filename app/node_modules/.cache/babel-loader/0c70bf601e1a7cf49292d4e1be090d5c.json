{"ast":null,"code":"var _jsxFileName = \"E:\\\\krishi\\\\app\\\\src\\\\utils\\\\table.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nexport const Table = ({\n  THead,\n  TBody,\n  ActionButton\n}) => {\n  console.log(Object.keys(ActionButton).length);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"z-depth-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"responsive-table centered bordered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, THead.map((THcontent, index) => {\n    return React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, THcontent);\n  }))), TBody.map((TBodyData, index) => {\n    var Column = Object.keys(TBodyData).map(function (key) {\n      return TBodyData[key];\n    }); //   var hi = Object.keys(ActionButton).map(function(key, i) {\n    //     // use keyName to get current key's name\n    //     // and a[keyName] to get its value\n    //     // console.log(keyName),\n    //     // console.log(keyIndex)\n    //     return (\n    //         <div>\n    //             <Link \n    //             to={{pathname :`/operations/country/update`,\n    //             state: {countryId:Column[0]}\n    //                 }}><i className=\"material-icons\">edit</i>\n    //             </Link>\n    //             <i className=\"material-icons small\">more_vert</i>\n    //         </div>\n    //     )\n    //   })\n    //   console.log(hi)\n\n    return React.createElement(\"tbody\", {\n      key: Column[0],\n      className: Column[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, Column[1]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, Column[2]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: {\n        pathname: \"/operations/country/update\",\n        state: {\n          countryId: Column[0]\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"edit\")), React.createElement(\"i\", {\n      className: \"material-icons small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"more_vert\"), Column[2] == 'Active' ? React.createElement(\"i\", {\n      className: \"material-icons\",\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => this.countryDelete(Column[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"check_circle\") : React.createElement(\"i\", {\n      className: \"material-icons\",\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => this.countryDelete(Column[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"block\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, Object.keys(ActionButton).map(Button => {\n      const ButtonProperty = ActionButton[Button];\n      let ButtonHTML;\n\n      if (ButtonProperty.Link !== undefined) {\n        ButtonHTML = React.createElement(Link, {\n          to: {\n            pathname: ButtonProperty.Link,\n            state: {\n              countryId: Column[ButtonProperty.StateColumn]\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, ButtonProperty.ActiveIcon));\n      } else if (ButtonProperty.Toggle === true) {\n        ButtonHTML = Column[ButtonProperty.BaseColumn] ? React.createElement(\"i\", {\n          className: \"material-icons\",\n          style: {\n            cursor: 'pointer'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, ButtonProperty.ActiveIcon) : React.createElement(\"i\", {\n          className: \"material-icons\",\n          style: {\n            cursor: 'pointer'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, ButtonProperty.InactiveIcon);\n      } else {}\n\n      return React.createElement(React.Fragment, null, ButtonHTML);\n    }))));\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["E:\\krishi\\app\\src\\utils\\table.js"],"names":["React","Link","Table","THead","TBody","ActionButton","console","log","Object","keys","length","map","THcontent","index","TBodyData","Column","key","pathname","state","countryId","cursor","countryDelete","Button","ButtonProperty","ButtonHTML","undefined","StateColumn","ActiveIcon","Toggle","BaseColumn","InactiveIcon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAGA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAAgC;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EAA0BK,MAAtC;AACI,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,SAAS,EAAC,oCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQP,KAAK,CAACQ,GAAN,CAAU,CAACC,SAAD,EAAaC,KAAb,KAAuB;AAC7B,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,SAAL,CADJ;AAGH,GAJD,CAFR,CADA,CADxB,EAmB4BR,KAAK,CAACO,GAAN,CAAU,CAACG,SAAD,EAAaD,KAAb,KAAuB;AAC7B,QAAIE,MAAM,GAAGP,MAAM,CAACC,IAAP,CAAYK,SAAZ,EAAuBH,GAAvB,CAA2B,UAASK,GAAT,EAAc;AAClD,aAAOF,SAAS,CAACE,GAAD,CAAhB;AACD,KAFU,CAAb,CAD6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AACA,WACI;AAAO,MAAA,GAAG,EAAID,MAAM,CAAC,CAAD,CAApB;AAAyB,MAAA,SAAS,EAAIA,MAAM,CAAC,CAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,MAAM,CAAC,CAAD,CAAX,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,MAAM,CAAC,CAAD,CAAX,CAFJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACA,MAAA,EAAE,EAAE;AAACE,QAAAA,QAAQ,8BAAT;AACJC,QAAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAACJ,MAAM,CAAC,CAAD;AAAjB;AADH,OADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGO;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHP,CADJ,EAMI;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANJ,EASQA,MAAM,CAAC,CAAD,CAAN,IAAa,QAAb,GACA;AAAG,MAAA,SAAS,EAAC,gBAAb;AAA8B,MAAA,KAAK,EAAE;AAACK,QAAAA,MAAM,EAAC;AAAR,OAArC;AAAyD,MAAA,OAAO,EAAE,MAAI,KAAKC,aAAL,CAAmBN,MAAM,CAAC,CAAD,CAAzB,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,GAEA;AAAG,MAAA,SAAS,EAAC,gBAAb;AAA8B,MAAA,KAAK,EAAE;AAACK,QAAAA,MAAM,EAAC;AAAR,OAArC;AAAyD,MAAA,OAAO,EAAE,MAAI,KAAKC,aAAL,CAAmBN,MAAM,CAAC,CAAD,CAAzB,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXR,CAJJ,EAoCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEMP,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EAA0BM,GAA1B,CAA+BW,MAAD,IAAY;AACtC,YAAMC,cAAc,GAAGlB,YAAY,CAACiB,MAAD,CAAnC;AACA,UAAIE,UAAJ;;AACA,UAAGD,cAAc,CAACtB,IAAf,KAAwBwB,SAA3B,EAAqC;AAE/BD,QAAAA,UAAU,GACN,oBAAC,IAAD;AACI,UAAA,EAAE,EAAE;AAACP,YAAAA,QAAQ,EAAEM,cAAc,CAACtB,IAA1B;AACJiB,YAAAA,KAAK,EAAE;AAACC,cAAAA,SAAS,EAACJ,MAAM,CAACQ,cAAc,CAACG,WAAhB;AAAjB;AADH,WADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIK;AAAG,UAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BH,cAAc,CAACI,UAA9C,CAJL,CADJ;AASL,OAXD,MAWM,IAAGJ,cAAc,CAACK,MAAf,KAA0B,IAA7B,EAAkC;AACtCJ,QAAAA,UAAU,GACNT,MAAM,CAACQ,cAAc,CAACM,UAAhB,CAAN,GACA;AAAG,UAAA,SAAS,EAAC,gBAAb;AAA8B,UAAA,KAAK,EAAE;AAACT,YAAAA,MAAM,EAAC;AAAR,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DG,cAAc,CAACI,UAA1E,CADA,GAGA;AAAG,UAAA,SAAS,EAAC,gBAAb;AAA8B,UAAA,KAAK,EAAE;AAACP,YAAAA,MAAM,EAAC;AAAR,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DG,cAAc,CAACO,YAA1E,CAJJ;AAOD,OARK,MAQD,CAEJ;;AACD,aACI,0CAEEN,UAFF,CADJ;AAMH,KA/BD,CAFN,CApCJ,CADA,CADJ;AA+EH,GAtGD,CAnB5B,CADA,CADJ,EA+HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/HA,CADJ;AAmIH,CArIM","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport const Table = ({THead, TBody, ActionButton})=>{\r\nconsole.log(Object.keys(ActionButton).length)\r\n    return(\r\n        <div>\r\n            <div className=\"z-depth-4\">\r\n            <table className=\"responsive-table centered bordered\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        {\r\n                                            THead.map((THcontent , index) => {\r\n                                                return(\r\n                                                    <th>{THcontent}</th>\r\n                                                )\r\n                                            })\r\n\r\n                                        }\r\n                                        {/* {\r\n                                            ActionButton.Display == true ? <th>Action</th>:null\r\n                                        } */}\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                    {\r\n                                        \r\n                                        TBody.map((TBodyData , index) => {\r\n                                            var Column = Object.keys(TBodyData).map(function(key) {\r\n                                                return TBodyData[key];\r\n                                              });\r\n                                            //   var hi = Object.keys(ActionButton).map(function(key, i) {\r\n                                            //     // use keyName to get current key's name\r\n                                            //     // and a[keyName] to get its value\r\n                                            //     // console.log(keyName),\r\n                                            //     // console.log(keyIndex)\r\n                                            //     return (\r\n                                            //         <div>\r\n                                            //             <Link \r\n                                            //             to={{pathname :`/operations/country/update`,\r\n                                            //             state: {countryId:Column[0]}\r\n                                            //                 }}><i className=\"material-icons\">edit</i>\r\n                                            //             </Link>\r\n                                            //             <i className=\"material-icons small\">more_vert</i>\r\n                                            //         </div>\r\n                                                    \r\n\r\n                                            //     )\r\n                                            //   })\r\n                                            //   console.log(hi)\r\n                                            return (\r\n                                                <tbody key = {Column[0]} className = {Column[0]}>\r\n                                                <tr >\r\n                                                    <td>{Column[1]}</td>\r\n                                                    <td>{Column[2]}</td>\r\n                                                    \r\n                                                    <td>\r\n                                                        <Link \r\n                                                        to={{pathname :`/operations/country/update`,\r\n                                                        state: {countryId:Column[0]}\r\n                                                            }}><i className=\"material-icons\">edit</i>\r\n                                                        </Link>\r\n                                                        <i className=\"material-icons small\">more_vert</i>\r\n                                                        \r\n                                                        {\r\n                                                            Column[2] == 'Active'?\r\n                                                            <i className=\"material-icons\" style={{cursor:'pointer'}} onClick={()=>this.countryDelete(Column[0])}>check_circle</i>:\r\n                                                            <i className=\"material-icons\" style={{cursor:'pointer'}} onClick={()=>this.countryDelete(Column[0])}>block</i>\r\n                                                        }\r\n\r\n                                                        {/* {\r\n                                                            ActionButton.Edit.Show ?\r\n                                                            <Link \r\n                                                                to={{pathname :ActionButton.Edit.Link, state: {countryId:Column[0]} }}>\r\n                                                                <i className=\"material-icons\">{ActionButton.Edit.Icon}</i>\r\n                                                            </Link>\r\n                                                            :\r\n                                                            null\r\n                                                        }\r\n                                                        {\r\n                                                          ActionButton.Edit.Show && ActionButton.Edit.Separator ?\r\n                                                          <i className=\"material-icons small\">more_vert</i>\r\n                                                          :\r\n                                                          null  \r\n                                                        } */}\r\n                                                        \r\n                                                        \r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {\r\n                                                          Object.keys(ActionButton).map((Button) => {\r\n                                                              const ButtonProperty = ActionButton[Button];\r\n                                                              let ButtonHTML\r\n                                                              if(ButtonProperty.Link !== undefined){\r\n                                                                  \r\n                                                                    ButtonHTML = \r\n                                                                        <Link \r\n                                                                            to={{pathname :ButtonProperty.Link,\r\n                                                                            state: {countryId:Column[ButtonProperty.StateColumn]}\r\n                                                                            }}\r\n                                                                            ><i className=\"material-icons\">{ButtonProperty.ActiveIcon}</i>\r\n                                                                        </Link>\r\n                                                                       \r\n                                                                \r\n                                                              }else if(ButtonProperty.Toggle === true){\r\n                                                                ButtonHTML = \r\n                                                                    Column[ButtonProperty.BaseColumn] ? \r\n                                                                    <i className=\"material-icons\" style={{cursor:'pointer'}} >{ButtonProperty.ActiveIcon}</i>\r\n                                                                    :\r\n                                                                    <i className=\"material-icons\" style={{cursor:'pointer'}} >{ButtonProperty.InactiveIcon}</i>;\r\n                                                                    \r\n                                                                        \r\n                                                              }else{\r\n\r\n                                                              }\r\n                                                              return(\r\n                                                                  < >\r\n                                                                  \r\n                                                                   {ButtonHTML}\r\n                                                                   </>\r\n                                                              )\r\n                                                          })  \r\n                                                        }\r\n                                                        </td>\r\n                                                    \r\n                                                </tr>\r\n                                                </tbody>\r\n                                                );\r\n                                            \r\n                                        })\r\n                                    }\r\n                                </table>\r\n            </div>\r\n        <div/>\r\n        </div>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}