{"ast":null,"code":"var _jsxFileName = \"E:\\\\krishi\\\\app\\\\src\\\\components\\\\operations\\\\users\\\\admin\\\\addUpdateAdmin.js\";\nimport React, { Component } from 'react';\nimport { Topnav, SideBar, FormValidator, Notification } from './../../../../utils/Util';\n\nclass addUpdateAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.validator = new FormValidator([{\n      field: 'fname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'First Name is required.'\n    }, {\n      field: 'lname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Last Name is required.'\n    }, {\n      field: 'uname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'User Name is required.'\n    }, {\n      field: 'email',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Email is required.'\n    }, {\n      field: 'email',\n      method: 'isEmail',\n      validWhen: true,\n      message: 'That is not a valid email.'\n    }, {\n      field: 'doj',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'DOJ is required.'\n    }, {\n      field: 'dob',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'DOB is required.'\n    }, {\n      field: 'mobile',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Pleave provide a phone number.'\n    }, {\n      field: 'mobile',\n      method: 'matches',\n      args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/],\n      // args is an optional array of arguements that will be passed to the validation method\n      validWhen: true,\n      message: 'That is not a valid phone number.'\n    }]);\n    this.state = {\n      fname: '',\n      lname: '',\n      uname: '',\n      gender: '',\n      email: '',\n      mobile: '',\n      password: '',\n      validation: this.validator.valid()\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(TopNav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col s9 offset-s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Add Chief Executive\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default addUpdateAdmin;","map":{"version":3,"sources":["E:\\krishi\\app\\src\\components\\operations\\users\\admin\\addUpdateAdmin.js"],"names":["React","Component","Topnav","SideBar","FormValidator","Notification","addUpdateAdmin","constructor","props","handleInputChange","event","setState","target","name","value","validator","field","method","validWhen","message","args","state","fname","lname","uname","gender","email","mobile","password","validation","valid","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Topnav, SideBar, FormValidator, Notification } from './../../../../utils/Util'\r\n\r\nclass addUpdateAdmin extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.validator = new FormValidator([\r\n            { \r\n                field: 'fname', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'First Name is required.' \r\n            },\r\n            { \r\n                field: 'lname', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'Last Name is required.' \r\n            },\r\n            { \r\n                field: 'uname', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'User Name is required.' \r\n            },\r\n            { \r\n                field: 'email', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'Email is required.' \r\n            },\r\n            { \r\n                field: 'email',\r\n                method: 'isEmail', \r\n                validWhen: true, \r\n                message: 'That is not a valid email.'\r\n            },\r\n            { \r\n                field: 'doj', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'DOJ is required.' \r\n            },\r\n            { \r\n                field: 'dob', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'DOB is required.' \r\n            },\r\n            { \r\n                field: 'mobile', \r\n                method: 'isEmpty', \r\n                validWhen: false, \r\n                message: 'Pleave provide a phone number.'\r\n            },\r\n            {\r\n                field: 'mobile', \r\n                method: 'matches',\r\n                args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/], // args is an optional array of arguements that will be passed to the validation method\r\n                validWhen: true, \r\n                message: 'That is not a valid phone number.'\r\n            }\r\n\r\n          ]);\r\n\r\n        this.state = {\r\n            fname: '',\r\n            lname: '',\r\n            uname: '',\r\n            gender:'',\r\n            email: '',\r\n            mobile: '',\r\n            password: '',\r\n            validation: this.validator.valid() \r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n    }\r\n\r\n    handleInputChange = event =>{\r\n        this.setState({\r\n            [ event.target.name ] : event.target.value\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <TopNav/>\r\n                <Sidebar/>\r\n                <div  className=\"row\">\r\n                    <div className=\"col s9 offset-s3\">\r\n                        <h5>Add Chief Executive</h5>\r\n                        <br/><br/>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default addUpdateAdmin\r\n"]},"metadata":{},"sourceType":"module"}